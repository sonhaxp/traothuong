/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import controllers.HoKhauController;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.so_ho_khau;

public class HoKhauManagePanel extends javax.swing.JPanel {
    
    private JFrame parentFrame;
    private DefaultTableModel dtm ;
    private List<so_ho_khau> ds_hokhau;
    public HoKhauManagePanel(JFrame parentFrame) throws ClassNotFoundException {
        this.parentFrame = parentFrame;
        initComponents();
        btnSua.setEnabled(false);
        btnXoa.setEnabled(false);
        dtm = (DefaultTableModel) tblHoKhau.getModel();
        Load("");
        
    }
    public void Load(String s) throws ClassNotFoundException{
        dtm.setRowCount(0);
        try {
            ds_hokhau = controllers.HoKhauController.get_hokhau(s);
            for (so_ho_khau hokhau : ds_hokhau) {
                dtm.addRow(new Object[]{hokhau.getID(),hokhau.getTenChuHo(),hokhau.getDiaChi()});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(parentFrame, "Khong the ket noi csdl","Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHoKhau = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnTimKiem = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtfHoTen = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfDiaChi = new javax.swing.JTextField();
        btnXoa = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        jtfSearch.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jtfSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfSearchActionPerformed(evt);
            }
        });
        add(jtfSearch);
        jtfSearch.setBounds(140, 420, 110, 30);

        jScrollPane1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        tblHoKhau.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblHoKhau.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tên chủ hộ", "Địa chỉ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHoKhau.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoKhauMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHoKhau);

        add(jScrollPane1);
        jScrollPane1.setBounds(0, 50, 680, 360);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Nhập ID hộ khẩu");
        add(jLabel2);
        jLabel2.setBounds(20, 420, 98, 30);

        btnTimKiem.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });
        add(btnTimKiem);
        btnTimKiem.setBounds(280, 420, 90, 30);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Tên chủ hộ:");
        add(jLabel1);
        jLabel1.setBounds(20, 10, 70, 20);

        jtfHoTen.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(jtfHoTen);
        jtfHoTen.setBounds(100, 10, 130, 23);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Địa chỉ:");
        add(jLabel3);
        jLabel3.setBounds(280, 10, 50, 20);

        jtfDiaChi.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add(jtfDiaChi);
        jtfDiaChi.setBounds(350, 10, 330, 23);

        btnXoa.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        add(btnXoa);
        btnXoa.setBounds(720, 160, 90, 30);

        btnThem.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        add(btnThem);
        btnThem.setBounds(720, 40, 90, 30);

        btnSua.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        add(btnSua);
        btnSua.setBounds(720, 100, 90, 30);

        btnLamMoi.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });
        add(btnLamMoi);
        btnLamMoi.setBounds(720, 210, 90, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void jtfSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfSearchActionPerformed
        
    }//GEN-LAST:event_jtfSearchActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        try {
            Load(jtfSearch.getText());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HoKhauManagePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed
int index;
    private void tblHoKhauMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoKhauMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            index = tblHoKhau.getSelectedRow();
            try {        
                HoKhauFrame hokhau = new HoKhauFrame(""+ds_hokhau.get(index).getID()+"",this.parentFrame);
                hokhau.setVisible(true);
                hokhau.setLocationRelativeTo(null);
                hokhau.setResizable(false);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(HoKhauManagePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
                index = tblHoKhau.getSelectedRow();
                jtfHoTen.setText(ds_hokhau.get(index).getTenChuHo());
                jtfDiaChi.setText(ds_hokhau.get(index).getDiaChi());
                btnSua.setEnabled(true);
                btnXoa.setEnabled(true);
                btnThem.setEnabled(false);
        }
    }//GEN-LAST:event_tblHoKhauMouseClicked

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        try {        
                controllers.HoKhauController.deleteHoKhau(ds_hokhau.get(index).getID());
                Load("");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(parentFrame, "Không thể xóa hộ khẩu này","Error",JOptionPane.ERROR_MESSAGE);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(parentFrame, "Không thể xóa hộ khẩu này","Error",JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        String HoTen = jtfHoTen.getText().toString();
        String DiaChi = jtfDiaChi.getText().toString();
        if(HoTen.equals("")||DiaChi.equals("")){
            JOptionPane.showMessageDialog(parentFrame, "Vui lòng nhập đầy đủ thông tin","Error",JOptionPane.ERROR_MESSAGE);
        }   
        else{
            so_ho_khau hokhau = new so_ho_khau(1,HoTen,DiaChi);
            try {        
                controllers.HoKhauController.addHoKhau(hokhau);
                Load("");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(parentFrame, "Không thể thêm hộ khẩu","Error",JOptionPane.ERROR_MESSAGE);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(parentFrame, "Không thể thêm hộ khẩu","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        String HoTen = jtfHoTen.getText().toString();
        String DiaChi = jtfDiaChi.getText().toString();
        if(HoTen==""||DiaChi==""){
            JOptionPane.showMessageDialog(parentFrame, "Vui lòng nhập đầy đủ thông tin","Error",JOptionPane.ERROR_MESSAGE);
        }   
        else{
            so_ho_khau hokhau = new so_ho_khau(ds_hokhau.get(index).getID(),HoTen,DiaChi);
            try {        
                controllers.HoKhauController.updateHoKhau(hokhau);
                Load("");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(parentFrame, "Không thể sửa hộ khẩu","Error",JOptionPane.ERROR_MESSAGE);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(parentFrame, "Không thể sửa hộ khẩu","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        jtfDiaChi.setText("");
        jtfHoTen.setText("");
        btnSua.setEnabled(false);
        btnXoa.setEnabled(false);
btnThem.setEnabled(true);
index = -1;
    }//GEN-LAST:event_btnLamMoiActionPerformed
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jtfDiaChi;
    private javax.swing.JTextField jtfHoTen;
    private javax.swing.JTextField jtfSearch;
    private javax.swing.JTable tblHoKhau;
    // End of variables declaration//GEN-END:variables
}
